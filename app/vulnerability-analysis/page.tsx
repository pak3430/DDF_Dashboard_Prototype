'use client'

import { useState, useEffect } from 'react'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Button } from "@/components/ui/button"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { MapLeafletHeatmap } from "@/components/map-leaflet-heatmap"
import { MapPin, TrendingUp, AlertTriangle, Target, Download, RefreshCw, Users, Route, Clock, Zap } from "lucide-react"
import { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer, PieChart, Pie, Cell } from 'recharts'

interface VulnerabilityData {
  vulnerability_score: {
    seoul_average: number
    district_scores: Array<{
      district_name: string
      score: number
      rank: number
      category: '매우취약' | '취약' | '보통' | '양호'
    }>
  }
  critical_areas: Array<{
    area_id: string
    area_name: string
    coordinates: { lat: number; lng: number }
    issues: string[]
    priority_score: number
  }>
  improvement_suggestions: Array<{
    area_id: string
    suggestion_type: 'DRT도입' | '노선증설' | '배차간격단축'
    expected_benefit: string
    implementation_cost: 'Low' | 'Medium' | 'High'
  }>
}

export default function VulnerabilityAnalysisPage() {
  const [vulnerabilityData, setVulnerabilityData] = useState<VulnerabilityData | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [lastUpdated, setLastUpdated] = useState<Date>(new Date())

  // 취약지 분석 데이터 fetch
  const fetchVulnerabilityData = async () => {
    setIsLoading(true)
    try {
      const response = await fetch('/api/v1/dashboard/analytics/vulnerability-analysis?analysis_type=overall&include_ranking=true')
      const result = await response.json()
      
      if (result.success) {
        setVulnerabilityData(result.data)
        setLastUpdated(new Date())
      }
    } catch (error) {
      console.error('취약지 분석 데이터 로드 실패:', error)
    } finally {
      setIsLoading(false)
    }
  }

  useEffect(() => {
    fetchVulnerabilityData()
  }, [])

  // 통계 데이터 계산
  const stats = vulnerabilityData ? [
    {
      name: "취약지역 수",
      value: `${vulnerabilityData.critical_areas.length}개 구역`,
      icon: AlertTriangle,
      change: "+3개",
      changeType: "negative" as const,
    },
    {
      name: "서울시 평균 취약도",
      value: vulnerabilityData.vulnerability_score.seoul_average.toFixed(1),
      icon: Target,
      change: "-2.3",
      changeType: "positive" as const,
    },
    {
      name: "개선방안 제안",
      value: `${vulnerabilityData.improvement_suggestions.length}개`,
      icon: Zap,
      change: "+2개",
      changeType: "positive" as const,
    },
    {
      name: "분석 대상 구",
      value: `${vulnerabilityData.vulnerability_score.district_scores.length}개`,
      icon: MapPin,
      change: "전체",
      changeType: "neutral" as const,
    },
  ] : []

  // 차트 데이터 변환
  const districtChartData = vulnerabilityData?.vulnerability_score.district_scores
    .slice(0, 10) // 상위 10개
    .map(district => ({
      구명: district.district_name,
      취약도: district.score,
      순위: district.rank
    })) || []

  // 카테고리별 분포 데이터
  const categoryData = vulnerabilityData ? 
    ['매우취약', '취약', '보통', '양호'].map(category => ({
      name: category,
      value: vulnerabilityData.vulnerability_score.district_scores
        .filter(d => d.category === category).length,
      color: category === '매우취약' ? '#ef4444' : 
             category === '취약' ? '#f97316' :
             category === '보통' ? '#eab308' : '#22c55e'
    })) : []

  // 개선방안 타입별 분포
  const suggestionData = vulnerabilityData ?
    ['DRT도입', '노선증설', '배차간격단축'].map(type => ({
      name: type,
      value: vulnerabilityData.improvement_suggestions
        .filter(s => s.suggestion_type === type).length
    })) : []

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* 페이지 헤더 */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold flex items-center gap-3">
            <AlertTriangle className="w-8 h-8 text-red-600" />
            교통 취약지 분석
          </h1>
          <p className="text-gray-600 mt-2">실제 DB 데이터 기반 대중교통 취약지역 식별 및 개선 방안</p>
        </div>
        
        <div className="flex gap-2">
          <Button variant="outline" size="sm" onClick={fetchVulnerabilityData} disabled={isLoading}>
            <RefreshCw className={`h-4 w-4 mr-2 ${isLoading ? 'animate-spin' : ''}`} />
            새로고침
          </Button>
          <Button variant="outline" size="sm">
            <Download className="h-4 w-4 mr-2" />
            보고서 다운로드
          </Button>
        </div>
      </div>

      {/* 통계 카드 */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {stats.map((stat) => (
          <Card key={stat.name}>
            <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
              <CardTitle className="text-sm font-medium text-gray-600">{stat.name}</CardTitle>
              <stat.icon className="h-4 w-4 text-gray-400" />
            </CardHeader>
            <CardContent>
              <div className="text-2xl font-bold text-gray-900">{stat.value}</div>
              <p className={`text-xs mt-1 ${
                stat.changeType === "positive" ? "text-green-600" : 
                stat.changeType === "negative" ? "text-red-600" : "text-gray-600"
              }`}>
                {stat.change} {stat.changeType !== "neutral" && "전월 대비"}
              </p>
            </CardContent>
          </Card>
        ))}
      </div>

      {/* 데이터 상태 표시 */}
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-4">
          <Badge variant="secondary" className="bg-blue-100 text-blue-800">
            실제 DB 기반 분석
          </Badge>
          <span className="text-sm text-gray-600">
            마지막 업데이트: {lastUpdated.toLocaleTimeString('ko-KR')}
          </span>
        </div>
        <div className="text-sm text-gray-500">
          분석 대상: 1,660개 노선, 100,415개 정류장
        </div>
      </div>

      <Tabs defaultValue="overview" className="space-y-6">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="overview">개요</TabsTrigger>
          <TabsTrigger value="districts">구별 분석</TabsTrigger>
          <TabsTrigger value="map">취약지 지도</TabsTrigger>
          <TabsTrigger value="suggestions">개선 방안</TabsTrigger>
        </TabsList>

        {/* 개요 탭 */}
        <TabsContent value="overview" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* 카테고리별 분포 */}
            <Card>
              <CardHeader>
                <CardTitle>취약도 카테고리별 분포</CardTitle>
                <CardDescription>서울시 25개 구의 취약도 분류</CardDescription>
              </CardHeader>
              <CardContent>
                {isLoading ? (
                  <div className="h-64 flex items-center justify-center">
                    <div className="text-center">
                      <AlertTriangle className="w-8 h-8 animate-pulse mx-auto mb-2 text-red-600" />
                      <p>취약지 분석 중...</p>
                    </div>
                  </div>
                ) : (
                  <ResponsiveContainer width="100%" height={300}>
                    <PieChart>
                      <Pie
                        data={categoryData}
                        cx="50%"
                        cy="50%"
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                        label={({ name, value }) => `${name}: ${value}개`}
                      >
                        {categoryData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip />
                    </PieChart>
                  </ResponsiveContainer>
                )}
              </CardContent>
            </Card>

            {/* 개선방안 분포 */}
            <Card>
              <CardHeader>
                <CardTitle>개선방안 타입별 분포</CardTitle>
                <CardDescription>취약지역별 권장 개선방안</CardDescription>
              </CardHeader>
              <CardContent>
                <ResponsiveContainer width="100%" height={300}>
                  <BarChart data={suggestionData}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis dataKey="name" />
                    <YAxis />
                    <Tooltip />
                    <Bar dataKey="value" fill="#3b82f6" />
                  </BarChart>
                </ResponsiveContainer>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* 구별 분석 탭 */}
        <TabsContent value="districts" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle>구별 취약도 순위 (상위 10개)</CardTitle>
              <CardDescription>취약도 점수가 높을수록 교통 서비스 개선이 필요한 지역</CardDescription>
            </CardHeader>
            <CardContent>
              <ResponsiveContainer width="100%" height={400}>
                <BarChart data={districtChartData} layout="horizontal">
                  <CartesianGrid strokeDasharray="3 3" />
                  <XAxis type="number" />
                  <YAxis dataKey="구명" type="category" width={80} />
                  <Tooltip />
                  <Bar dataKey="취약도" fill="#ef4444" />
                </BarChart>
              </ResponsiveContainer>
            </CardContent>
          </Card>

          {/* 취약지역 상세 정보 */}
          {vulnerabilityData && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {vulnerabilityData.critical_areas.slice(0, 6).map((area, index) => (
                <Card key={index}>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      {area.area_name}
                      <Badge variant="destructive">
                        {index + 1}순위
                      </Badge>
                    </CardTitle>
                    <CardDescription>우선순위 점수: {area.priority_score}</CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-2">
                      <h4 className="font-medium text-sm">주요 문제점:</h4>
                      <ul className="text-sm text-gray-600 space-y-1">
                        {area.issues.slice(0, 3).map((issue, idx) => (
                          <li key={idx} className="flex items-center gap-2">
                            <span className="w-1 h-1 bg-red-500 rounded-full"></span>
                            {issue}
                          </li>
                        ))}
                      </ul>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>

        {/* 취약지 지도 탭 */}
        <TabsContent value="map" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <MapPin className="w-5 h-5" />
                교통 취약지 분포도
              </CardTitle>
              <CardDescription>
                실제 DB 데이터 기반 취약지역 히트맵 (486개 저빈도 노선 반영)
              </CardDescription>
            </CardHeader>
            <CardContent className="p-0">
              <div className="h-96">
                <MapLeafletHeatmap
                  filters={{
                    target_date: new Date().toISOString().split('T')[0],
                    time_range: 'all',
                    intensity_type: 'vulnerability',
                    include_poi: false
                  }}
                  className="w-full h-full"
                />
              </div>
            </CardContent>
          </Card>
        </TabsContent>

        {/* 개선 방안 탭 */}
        <TabsContent value="suggestions" className="space-y-6">
          {vulnerabilityData && (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
              {vulnerabilityData.improvement_suggestions.map((suggestion, index) => (
                <Card key={index}>
                  <CardHeader>
                    <CardTitle className="flex items-center justify-between">
                      {suggestion.area_id}
                      <Badge className={
                        suggestion.suggestion_type === 'DRT도입' ? 'bg-blue-500' :
                        suggestion.suggestion_type === '노선증설' ? 'bg-green-500' : 'bg-orange-500'
                      }>
                        {suggestion.suggestion_type}
                      </Badge>
                    </CardTitle>
                    <CardDescription>
                      구현 비용: {
                        suggestion.implementation_cost === 'High' ? '높음' :
                        suggestion.implementation_cost === 'Medium' ? '중간' : '낮음'
                      }
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <p className="text-sm text-gray-700 mb-4">{suggestion.expected_benefit}</p>
                    <div className="text-xs text-gray-500">
                      {suggestion.suggestion_type === 'DRT도입' && '• 수요응답형 서비스 도입'}
                      {suggestion.suggestion_type === '노선증설' && '• 기존 노선 확충'}  
                      {suggestion.suggestion_type === '배차간격단축' && '• 운행 빈도 증대'}
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          )}
        </TabsContent>
      </Tabs>
    </div>
  )
}
